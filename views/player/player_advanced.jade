extend player

block playercontent
  //pre #{JSON.stringify(player.aggData, null, 2)}
  //th KDA
  //th Abandon
  //td #{((player.aggData.kills.sum + player.aggData.assists.sum)/(player.aggData.deaths.sum+player.matches.length)).toFixed(2)}
  //td #{((1-(player.aggData.leaver_status.counts[0]+player.aggData.leaver_status.counts[1])/player.matches.length)*100 || 0).toFixed(2)}%
  .row
    .col-md-12
      include /query
  
  hr
  .advanced
    h2 Advanced<br>
      small The following data is only available for parsed matches.
    .row
      .col-md-8
        .row
          h3 Build Times <span class="label label-success">#{player.aggData.purchase_time.n} games</span>
          table.table#builds
            thead
              tr
                th Item
                th Item Name
                th.time Avg
                th Built
            tbody
              each val, key in player.aggData.purchase_time.counts
                - var item = constants.big_items[key]
                if item
                  tr 
                    td: img.item(src=item.img, alt=key)
                    td= item.dname
                    td=val/player.aggData.purchase_time_count.counts[key]
                    td=player.aggData.purchase.counts[key]
                
        .row
          h3 Skill Accuracy <span class="label label-primary">#{player.aggData.hero_hits.n} games</span>
          table.table#accuracy
            thead
              tr
                th Ability
                th Ability Name
                th Casts
                th Hits
                th Hit%
            tbody
              each val, key in player.aggData.hero_hits.counts
                - var ability = constants.abilities[key]
                - var casts = player.aggData.ability_uses.counts[key]
                - var hits = val
                if casts
                  tr
                    if ability
                      td
                        img.ability(src=ability.img, alt=key)
                      td= ability.dname
                    else
                      td=key
                      td=key
                    td=casts
                    td=hits
                    td=(hits/casts*100 || 0).toFixed(2)
        .row
          .col-md-6
            h3 Multi Kills
            table.table
              each val, key in constants.multi_kills
                tr
                  td #{val} (#{key})
                  td=player.aggData.multi_kills.counts[key] || 0

          .col-md-6
            h3 Kill Streaks
            table.table
              each val, key in constants.kill_streaks
                tr
                  td #{val} (#{key})
                  td=player.aggData.kill_streaks.counts[key] || 0

        .row
          .col-md-6
            h3 Observers <span class="label label-warning">#{player.aggData.obs.n} games</span>
            #map.mapContainer.mapContainer-small
              img.map(src='//cdn.rawgit.com/kronusme/dota2-api/master/images/map/dota-map-6.82.jpg', alt="map")
          .col-md-6
            h3 Sentries <span class="label label-info">#{player.aggData.sen.n} games</span>
            #map2.mapContainer.mapContainer-small
              img.map(src='//cdn.rawgit.com/kronusme/dota2-api/master/images/map/dota-map-6.82.jpg', alt="map")
      .col-md-4
        include /ads/skyscraper
        
append footer_assets
  script.
    var posData = !{JSON.stringify(player.posData)};
    adjustHeatmapData(posData, 300/127);
    var heatmap = h337.create({
      container: document.getElementById('map'),
      radius: 15
    });
    var heatmap2 = h337.create({
      container: document.getElementById('map2'),
      radius: 15
    });
    heatmap.setData(posData[0]["obs"]);
    heatmap2.setData(posData[0]["sen"]);
    playerTrendsTables();
    