extend player

block playercontent
  .row
    .col-md-6
      h3 Summary
      table.table.table-condensed
        thead
          tr
            th Record
            th Full History
            th Name Update
            th Last Visit
        tbody
          tr
            td #{player.aggData.win}-#{player.aggData.lose} (#{(player.aggData.win/player.aggData.games*100).toFixed(2) || 0.00}%)
            td=(player.full_history_time ? moment(player.full_history_time).fromNow() : "never")
            td=(player.last_summaries_update ? moment(player.last_summaries_update).fromNow() : "never")
            td #{(player.last_visited ? moment(player.last_visited).fromNow() : "never")} (#{(player.account_id in trackedPlayers) ? "tracked" : "untracked"})
    .col-md-6
      if (user && user.account_id === player.account_id)
        h3 Actions
        if (!user.full_history_time)
          .alert.alert-danger We don't have your old matches yet!  Check back later to see if we've gotten your full history.  In the meantime, play a game and we'll parse it for you!
        if (user.account_id in ratingPlayers)
          p: button.btn.btn-default(disabled) MMR Tracked
        else
          p: a.btn.btn-warning(href="http://steamcommunity.com/profiles/"+ (bots[0] ? bots[0].steamID : "")) Add MMR Tracker &raquo;
        .checkbox
          label
            input.pref#publicmmr(type="checkbox", checked=user.publicmmr)
            | Make MMR public
  .row
    .col-md-6
      h3 Recent Matches
      table.table
        thead
          tr
           th ID
           th Hero
           //th Result
           th Mode
           th Duration
           th Played
           th: abbr(title=constants.tooltips.status) Status
        each match in player.matches.slice(0,15)
          tr(class= match.player_win ? "success" : "danger")
            td: a(href='/matches/#{match.match_id}')= match.match_id
            - var hero = constants.heroes[match.players[0].hero_id]
            td.hero
              if hero
                img(src=hero.img, title=hero.localized_name)
              else
                =match.players[0].hero_id
            //td= match.player_win ? "Won" : "Lost"
            td= constants.modes[match.game_mode] ? constants.modes[match.game_mode].name : match.game_mode
            td= moment().startOf('day').seconds(match.duration).format("H:mm:ss")
            td= moment.unix(match.start_time + match.duration).fromNow()
            td=constants.parse_status[match.parse_status]
    .col-md-6
        h3 Heroes
        table.table
          thead
            tr
              th Hero
              th Games
              th Win%
          each h in player.heroes_arr.slice(0,15)
            - var hero = constants.heroes[h.hero_id]
            tr
              td.hero
                img(src=hero.img, title=hero.localized_name)
              td= h.games
              td
               - var pct = h ? ~~(100*h.win/h.games) : 0
               .progress
                 .progress-bar(class=pct >= 50 ? "progress-bar-success" : "progress-bar-danger" style="width: #{pct}%") #{pct}%
  hr
  .row
    include ads/leaderboard_2
  hr
  .row
    .col-md-6
      h3 Teammates
      table.table#teammates
        thead
          tr
            th Name
            th Games
            th Win%      
        each teammate in player.teammates.slice(0,15)
          tr
            td
              img.user(src=teammate.avatar)
              a(href='/players/#{teammate.account_id}')=teammate.personaname || teammate.account_id
            td= teammate.games
            td
             - var pct = teammate ? ~~(100*teammate.win/teammate.games) : 0
             .progress
               .progress-bar(class=pct >= 50 ? "progress-bar-success" : "progress-bar-danger" style="width: #{pct}%") #{pct}%
    .col-md-6
      h3 Rating (#{player.publicmmr ? "public" : "private"})
      h4#solo Solo:
      h4#party Party:
      #ratings(style="margin-top:5em;")

append footer_assets
  script.
    $(".pref").change(function() {
        $.post(
            "/preferences", {
                publicmmr: $("#publicmmr").is(":checked")
            },
            function(data) {
                if (data.sync) {
                    location.reload(true);
                }
                else {
                    $(".page-header").after("<div role='alert' class='sync alert alert-warning'>Failed to update preferences. Try again later.</div>");
                }
                $(".sync").fadeOut(3000);
            });
    });
      var ratings = !{JSON.stringify((player.publicmmr || (user && user.account_id === player.account_id)) ? ratings : [])};
      $("#solo").append(ratings[0] ?  ratings[0].soloCompetitiveRank : "N/A");
      $("#party").append(ratings[0] ?  ratings[0].competitiveRank : "N/A");
      var times = ratings.map(function(r){return new Date(r.time);});
      var solo = ratings.map(function(r){return r.soloCompetitiveRank;});
      var party = ratings.map(function(r){return r.competitiveRank;});
      c3.generate({
      bindto: "#ratings",
      data: {
          x: 'x',
          columns: [
          ['x'].concat(times),
          ['Solo'].concat(solo),
          ['Party'].concat(party)
          ],
          type:"line"
      },
      axis: {
          x: {
              type: 'timeseries',
              label: 'Date',
              tick: {
                  format: '%Y-%m-%d',
                  count: 10
              }
          },
          y: {
              label: 'Rating'
          }
      }
      });