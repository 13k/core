extend layout

block content
  h3 What is YASP?
  p YASP is a free, open-source Dota 2 stats site.  We currently offer the following features:
  ul
    li Replay parsing.  This allows us to present additional statistics that aren't available in the API or game client.
    li Rating tracking.  This allows us to show you your rating history.
    li Visualizations.  We generate histograms and heatmaps of your Dota 2 match data.
  
  h3 What does YASP stand for?
  p YASP stands for YASP: Another Stats Page, which makes it a recursive acronym along the lines of GNU and YAML.
  
  h3 How do you make money/keep the site running?
  p YASP is a side project of a group of college students.  As such, we're not looking to make money off the site, although we do run ads to help pay for server costs.
  
  h3 How do I use YASP?
  p Sign in through Steam, and we'll start tracking your matches and automatically parse the replays.

  h3 What do I do if I have a bug or feature request?
  p The best way to let us know is by making an issue on GitHub.  This way we can discuss the issue/request with you.
  
  h3 Why are my matches showing up, but don't get parsed?
  p There is usually a delay after the match (~10 minutes) while we wait for Valve to make the replay downloadable.
  p After that, the replay might not be available, which happens occasionally (particularly in the SEA region).
  p Alternatively, our parser couldn't process the match.  We're always looking for bugs and re-parsing matches when we can.  Usually, we're able to parse over 95% of games.
  
  h3 Why don't you have my old matches?
  p YASP only starts tracking your matches from when you signed in.  We get full match histories for contributors and active YASP users.
  
  h3 I signed in a while ago and just came back, why haven't my matches been tracked?
  p To keep the load reasonable, we stop parsing players' matches after a period of inactivity.  Each visit to the YASP site while signed in resets this period.
  
  h3 How do untracking and full history eligibility work?
  p Currently, we untrack users who have not visited YASP for 3 days.  For full history, we select one tracked user every hour whose account is at least 7 days old.
  
  h3 Why am I still missing some matches after getting my full history?
  p The Valve API limits results to a maximum of 500, so we can only get 500 games per hero per player.
  
  h3 Why can't you parse uploaded private lobby replays?
  p To generate the information for a match page, we combine the parsed data with data from the Valve API.  Since private matches can't be accessed through the API, we don't support these replays.

  h3 Why is there a difference between my parsed stats and what actually happened in the game?
  p Replay parsing is not an exact art.  Often, assumptions have to be made, and sometimes data is just inconsistent/unavailable.  If you find an issue, please report it!
  p Known Issues:
  ul
    li Hero Kills log doesn't always show all kills.  This is because the combat log credits kills to the unit who delivers the fatal blow, so kills by creeps/towers do not count.
    li Meepo appears to kill himself a lot.  This is because the game has Meepo kill all of his clones on one clone's death.
  
  h3 Can I use YASP in my own project?
  p YASP is licensed under the GNU GPLv3.  This means you can use YASP in your project if your project is also free and open source.  We also ask that you give us attribution in your project if you use our code.
  
  h3 How do I contribute to YASP?
  p YASP is open source!  Start a thread on GitHub if you'd like to work on a feature.  If you're not a developer, you can help us out by pointing out bugs or by submitting feature requests <a href='http://goo.gl/forms/NgwhEqx4lt', target="_blank">here</a>.
  
  h3 What is YASP built with?
  p YASP's main site and replay retriever are built with Node.js.  We use MongoDB to store our data and Redis/Kue to manage our job queue.
  p On the client side we use libraries including c3, cal-heatmap, heatmap.js, and DataTables.  
  p The parser is written in Java, using the clarity replay parsing library.
  p The original project code was based on matchurls.
