extend player

include mixins/hero_table
include mixins/teammate_table

block playercontent
  //pre #{JSON.stringify(player.aggData, null, 2)}
  //th KDA
  //th Abandon
  //td #{((player.aggData.kills.sum + player.aggData.assists.sum)/(player.aggData.deaths.sum+player.matches.length)).toFixed(2)}
  //td #{((1-(player.aggData.leaver_status.counts[0]+player.aggData.leaver_status.counts[1])/player.matches.length)*100 || 0).toFixed(2)}%
  .row
    .col-md-12
      include query
  
  hr
  .row
    .col-md-12
      h3
        .col-md-3.text-center
          a(href="#records")
            button.btn.btn-dark#records Records
        .col-md-3.text-center
          a(href="#matchups")
            button.btn.btn-dark#matchups Matchups
        .col-md-3.text-center
          a(href="#wards")
            button.btn.btn-dark#wards Wards
        .col-md-3.text-center
          a(href="#charts")
            button.btn.btn-dark#charts Charts
  hr
  #the_stats
    //stuff that doesnt need parsed data
    .records
      .row
        .col-md-12
          h3 Records
          table.table
            tr
              th Stat
              th Avg
              th Record
              th Set
              th N
              th Sum
            - var times={"duration":1,"first_blood_time":1}
            - var display={"total_gold":1, "courier_kills":1, "tower_kills":1, "neutral_kills":1, "kda":1,"observer_uses":1, "sentry_uses":1, "gold_per_min":1,"xp_per_min":1, "hero_damage":1,"tower_damage":1,"hero_healing":1,"kills":1,"deaths":1,"assists":1,"last_hits":1,"denies":1, "stuns":1, "buyback_count":1} 
            each val, key in player.aggData
              tr
                if key in times
                  td= key.split("_").map(function(s){ return s.charAt(0).toUpperCase() + s.slice(1)}).join(" ")
                  td.format-seconds(data-format-seconds=val.sum/val.n)
                  td.format-seconds(data-format-seconds=val.max)
                else if key in display
                  td= key === "kda" ? KDA : key.split("_").map(function(s){ return s.charAt(0).toUpperCase() + s.slice(1)}).join(" ")
                  td= val.n === 0 ? 0 : (val.sum/val.n).toFixed(2)
                  td=(val.max).toFixed(0)
                if key in times || key in display
                  td
                    a(href=val.max_match ? "/matches/"+ val.max_match.match_id : "#")=val.max_match ? moment.unix(val.max_match.start_time).fromNow() : "never"
                  td=val.n
                  td.format= val.sum
          h3 Leaver Status
          table.table
            each val, key in player.aggData.leaver_status.counts
              tr
                td=constants.leaver_status[key]
                td=val
          h3 Modes
          table.table
            each val, key in player.aggData.game_mode.counts
              tr
                td=constants.modes[key].name
                td=val
      .row
        .col-md-12.table-responsive
          h3 Histogram
          button.btn.btn-default.histogram(data-histogram="duration") Duration
          button.btn.btn-default.histogram(data-histogram="first_blood_time") FB
          button.btn.btn-default.histogram(data-histogram="gold_per_min") GPM
          button.btn.btn-default.histogram(data-histogram="hero_damage") HD
          button.btn.btn-default.histogram(data-histogram="tower_damage") TD
          button.btn.btn-default.histogram(data-histogram="hero_healing") HH
          button.btn.btn-default.histogram(data-histogram="kills") K
          button.btn.btn-default.histogram(data-histogram="deaths") D
          button.btn.btn-default.histogram(data-histogram="assists") A
          #chart-histogram
      .row
        .col-md-12
          +teammate_table(player.teammates)
      .row
        .col-md-12
          +hero_table(player.heroes_arr, true)
        
    //stuff that needs parsed data
    .matchups
      .row
        .col-md-12
          h3 Skill Accuracy
          table.table#accuracy
            thead
              tr
                td Ability
                td Ability Name
                td Casts
                td Hits
                td Hit%
            tbody
              each val, key in player.aggData.ability_uses.counts
                if player.aggData.hero_hits.counts[key]
                  tr
                    - var ability = constants.abilities[key]
                    if ability
                      td
                        img.ability(src=ability.img, alt=key)
                      td= ability.dname
                    else
                      td=key
                      td=key
                    td=val
                    td=player.aggData.hero_hits.counts[key]
                    td=(player.aggData.hero_hits.counts[key]/val*100 || 0).toFixed(2)
          h3 Build Times (#{player.aggData.purchase.n} games)
          table.table#builds
            thead
              tr
                th Item
                th Item Name
                th Avg
                th #
            tbody
              each val, key in player.aggData.purchase_time.counts
                - var item = constants.big_items[key]
                if item
                  tr 
                    td: img.item(src=item.img, alt=key)
                    td= item.dname
                    td.format-seconds(data-format-seconds=val/player.aggData.purchase_time_count.counts[key])=val/player.aggData.purchase_time_count.counts[key]
                    td=player.aggData.purchase.counts[key]
          h3 Laning
          table.table
            each val, key in player.aggData.lane_role.counts
              tr
                td=key
                td=val

    .wards
      .row
        .col-md-12
          h3 Warding (#{player.aggData.obs.n || 0} games)
          .row
            .col-md-4.text-center
              button.btn.btn-lg.btn-warning.activate#obs Observers 
              button.btn.btn-lg.btn-info.activate#sen Sentries
            .col-md-8.table-responsive
              #map.mapContainer.mapContainer-small(style="margin: 0 auto;")
                img.map(src='//cdn.rawgit.com/kronusme/dota2-api/master/images/map/dota-map-6.82.jpg', alt="map")

append footer_assets
  script.
    var aggData = !{JSON.stringify(player.aggData)};
    var posData = !{JSON.stringify(player.posData)};
    adjustHeatmapData(posData, 300/127);
    var heatmap = h337.create({
      container: document.getElementById('map'),
      radius: 15
    });
    //TODO: heatmap switcher, can we just have two static heatmaps?
    $(".activate").on('click', function() {
      heatmap.setData(posData[0][$(this).attr('id')]);
      heatmap.repaint();
    });
    playerMatches(teammates);
    generateHistograms(aggData);
    playerTrendsTables();
    
    //magical albert nav
    var sections = [$(".records"), $(".matchups"), $(".wards"), $(".charts"), $("#content")];
    function showSection(num) {
        sections.forEach(function(sec, index) {
            if (index === num) {
                sec.show();
            } else {
                sec.hide();
            }
        })
    }
    
    function getCharts() {
        showSection(3);
    }
    
    function getWards() {
        showSection(2);
    }
    
    function getMatchups() {
        showSection(1);
    }
    
    function getRecords() {
        showSection(0);
    }
    
    function getSection() {
        if (window.location.hash) {
            var hash = window.location.hash.substring(1);
    
            if (hash === "charts") {
                getCharts();
            }
            else if (hash === "wards") {
                getWards();
            }
            else if (hash === "matchups") {
                getMatchups();
            }
            else {
                getRecords();
            }
        }
        else {
            getRecords();
        }
    }
    
    getSection();
    
    $("#charts").click(function() {
        getCharts();
    });
    $("#wards").click(function() {
        getWards();
    });
    $("#records").click(function() {
        getRecords();
    });
    $("#matchups").click(function() {
        getMatchups();
    });
