extend player

block playercontent
  .row
    .col-md-6.table-responsive
      h3 Activity
      p
        button.btn.btn-default#prev &laquo;
        button.btn.btn-default#next &raquo;
      #cal-heatmap
    .col-md-3
      h3 Durations
      #chart-duration
    .col-md-3
      h3 GPMs
      #chart-gpms    
  hr
  .row
    .col-md-6
      h3 Observers (#{player.aggData.item_uses.counts.ward_observer || 0})
      #map.mapContainer
        img.map(src='//cdn.rawgit.com/kronusme/dota2-api/master/images/map/dota-map-6.82.jpg', alt="map")
    .col-md-6
      h3 Sentries (#{player.aggData.item_uses.counts.ward_sentry || 0})
      #map2.mapContainer
        img.map(src='//cdn.rawgit.com/kronusme/dota2-api/master/images/map/dota-map-6.82.jpg', alt="map")
  hr
  pre #{JSON.stringify(player.aggData,null,2)}
append footer_assets
  script.
    var data = !{JSON.stringify(player.histogramData)}
    generateHistograms(data);
      var heatmap = h337.create({
          container: document.getElementById('map'),
          radius: 15
        });
        var heatmap2 = h337.create({
          container: document.getElementById('map2'),
          radius: 15
        });
        var posData = !{JSON.stringify(player.posData)}
        posData.forEach(function(d){
          d.obs = scaleAndExtrema(d.obs);
          d.sen = scaleAndExtrema(d.sen);
        })
        
        function scaleAndExtrema(points, max, shift){
            points.forEach(function(p){
              p.x*=(600/127);
              p.y*=(600/127);
              p.value+=(shift || 0);
            })
            var vals = points.map(function(p){return p.value;});
            var localMax = Math.max.apply(null, vals);
            return {
            min: 0,
            max: max || localMax,
            data: points,
            };
        }
          heatmap.setData(posData[0]["obs"]);
          heatmap.repaint();
          heatmap2.setData(posData[0]["sen"]);
          heatmap2.repaint();

